{"ast":null,"code":"import * as sha256 from 'js-sha256';\nimport * as i0 from \"@angular/core\";\nexport class EncryptorService {\n  // return first val of email for salt\n  extractSalt(email) {\n    return email.split('@')[0] + 'Sudhata';\n  }\n  // Function to hash the password using SHA256 algorithm and the salt\n  hashPassword(password, salt) {\n    return sha256.sha256(salt + password);\n  }\n  // Function to encrypt the password by generating a salt and then hashing the password with the salt\n  encryptPassword(password, email) {\n    const salt = this.extractSalt(email);\n    const hash = this.hashPassword(password, salt);\n    // spilt and salt\n    let saltCharIndex = 0;\n    let encryptedPassword = '';\n    for (let i = 0; i < hash.length; i += 3) {\n      encryptedPassword += hash.slice(i, i + 3);\n      if (saltCharIndex < salt.length) {\n        encryptedPassword += salt.charAt(saltCharIndex);\n        saltCharIndex++;\n      }\n    }\n    return encryptedPassword;\n  }\n  // Function to extract the salt from the encrypted password\n  extSalt(encryptedPassword) {\n    return encryptedPassword.slice(-32);\n  }\n}\nEncryptorService.ɵfac = function EncryptorService_Factory(t) {\n  return new (t || EncryptorService)();\n};\nEncryptorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: EncryptorService,\n  factory: EncryptorService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,OAAO,KAAKA,MAAM,MAAM,WAAW;;AAMnC,OAAM,MAAOC,gBAAgB;EAE3B;EACQC,WAAW,CAACC,KAAa;IAC/B,OAAOA,KAAK,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,SAAS;EACxC;EAEA;EACQC,YAAY,CAACC,QAAgB,EAAEC,IAAY;IACjD,OAAOP,MAAM,CAACA,MAAM,CAACO,IAAI,GAAGD,QAAQ,CAAC;EACvC;EAEA;EACFE,eAAe,CAACF,QAAgB,EAAEH,KAAa;IAC3C,MAAMI,IAAI,GAAG,IAAI,CAACL,WAAW,CAACC,KAAK,CAAC;IACpC,MAAMM,IAAI,GAAG,IAAI,CAACJ,YAAY,CAACC,QAAQ,EAAEC,IAAI,CAAC;IAC9C;IACA,IAAIG,aAAa,GAAG,CAAC;IACrB,IAAIC,iBAAiB,GAAG,EAAE;IAC1B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,IAAI,CAACI,MAAM,EAAED,CAAC,IAAI,CAAC,EAAE;MACvCD,iBAAiB,IAAIF,IAAI,CAACK,KAAK,CAACF,CAAC,EAAEA,CAAC,GAAG,CAAC,CAAC;MACzC,IAAIF,aAAa,GAAGH,IAAI,CAACM,MAAM,EAAE;QAC/BF,iBAAiB,IAAIJ,IAAI,CAACQ,MAAM,CAACL,aAAa,CAAC;QAC/CA,aAAa,EAAE;;;IAGnB,OAAOC,iBAAiB;EAC1B;EACA;EACQK,OAAO,CAACL,iBAAyB;IACvC,OAAOA,iBAAiB,CAACG,KAAK,CAAC,CAAC,EAAE,CAAC;EACvC;;AA/Bab,gBAAgB;mBAAhBA,gBAAgB;AAAA;AAAhBA,gBAAgB;SAAhBA,gBAAgB;EAAAgB,SAAhBhB,gBAAgB;EAAAiB,YAFf;AAAM","names":["sha256","EncryptorService","extractSalt","email","split","hashPassword","password","salt","encryptPassword","hash","saltCharIndex","encryptedPassword","i","length","slice","charAt","extSalt","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\sahur\\OneDrive - Northern Data (Pty) Ltd\\Sahur_Maharaj\\Sahur_Maharaj\\Projects\\Timesheet-Project-V2\\Frontend\\chronosync\\src\\app\\services\\backend\\encryptor.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport * as sha256 from 'js-sha256';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EncryptorService {\n\n  // return first val of email for salt\n  private extractSalt(email: string): string {\n    return email.split('@')[0] + 'Sudhata';\n  }\n\n  // Function to hash the password using SHA256 algorithm and the salt\n  private hashPassword(password: string, salt: string): string {\n    return sha256.sha256(salt + password);\n  }\n\n  // Function to encrypt the password by generating a salt and then hashing the password with the salt\nencryptPassword(password: string, email: string): string {\n    const salt = this.extractSalt(email);\n    const hash = this.hashPassword(password, salt);\n    // spilt and salt\n    let saltCharIndex = 0;\n    let encryptedPassword = '';\n    for (let i = 0; i < hash.length; i += 3) {\n      encryptedPassword += hash.slice(i, i + 3);\n      if (saltCharIndex < salt.length) {\n        encryptedPassword += salt.charAt(saltCharIndex);\n        saltCharIndex++;\n      }\n    }\n    return encryptedPassword;\n  }\n  // Function to extract the salt from the encrypted password\n  private extSalt(encryptedPassword: string): string {\n    return encryptedPassword.slice(-32);\n}\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}