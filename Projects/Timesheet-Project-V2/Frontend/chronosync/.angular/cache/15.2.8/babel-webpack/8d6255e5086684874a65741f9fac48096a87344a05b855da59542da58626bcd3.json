{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class CalcTimeService {\n  constructor() {\n    this.startTime = '';\n    this.endTime = '';\n  }\n  startTime(stime) {\n    return stime;\n  }\n  endTime(eTime) {\n    return eTime;\n  }\n  spentTime(sptTime) {\n    return sptTime;\n  }\n  calculateSpentTime() {\n    if (startTime && endTime) {\n      const startAmPm = this.getAmPm(startTime);\n      const endAmPm = this.getAmPm(endTime);\n      const startTime24 = this.convertTo24HourFormat(startTime);\n      const endTime24 = this.convertTo24HourFormat(endTime);\n      const start = new Date(`2000-01-01T${startTime24}`);\n      const end = new Date(`2000-01-01T${endTime24}`);\n      if (startAmPm === 'PM' && endAmPm === 'AM') {\n        end.setDate(end.getDate() + 1); // Add 1 day if end time is in the next day\n      }\n\n      const diffInMs = end.getTime() - start.getTime();\n      if (diffInMs >= 0) {\n        const hours = Math.floor(diffInMs / (1000 * 60 * 60));\n        const minutes = Math.floor(diffInMs % (1000 * 60 * 60) / (1000 * 60));\n        spentTime = `${this.padZero(hours)}H${this.padZero(minutes)}`;\n      } else {\n        spentTime = 'Invalid Time'; // Display an error message for negative time\n      }\n    } else {\n      spentTime = 'Invalid Time';\n    }\n    return spentTime;\n  }\n  padZero(value) {\n    return value.toString().padStart(2, '0');\n  }\n  getAmPm(time) {\n    const [hours, minutes] = time.split(':');\n    const parsedHours = parseInt(hours, 10);\n    return parsedHours >= 12 ? 'PM' : 'AM';\n  }\n  convertTo24HourFormat(time) {\n    const [hours, minutes, amPm] = time.split(':');\n    const parsedHours = parseInt(hours, 10);\n    if (amPm === 'PM' && parsedHours < 12) {\n      return `${parsedHours + 12}:${minutes}`;\n    } else if (amPm === 'AM' && parsedHours === 12) {\n      return `00:${minutes}`;\n    } else {\n      return `${hours}:${minutes}`;\n    }\n  }\n}\nCalcTimeService.ɵfac = function CalcTimeService_Factory(t) {\n  return new (t || CalcTimeService)();\n};\nCalcTimeService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CalcTimeService,\n  factory: CalcTimeService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["CalcTimeService","constructor","startTime","stime","endTime","eTime","spentTime","sptTime","calculateSpentTime","startAmPm","getAmPm","endAmPm","startTime24","convertTo24HourFormat","endTime24","start","Date","end","setDate","getDate","diffInMs","getTime","hours","Math","floor","minutes","padZero","value","toString","padStart","time","split","parsedHours","parseInt","amPm","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Sahur Maharaj\\OneDrive - Northern Data (Pty) Ltd\\Sahur_Maharaj\\Sahur_Maharaj\\Projects\\Timesheet-Project-V2\\Frontend\\chronosync\\src\\app\\services\\backend\\calc-time.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CalcTimeService {\n\n  startTime:string = '';\n  endTime:string = '';\n\n\n  constructor() { }\n\n  startTime(stime:string){\n    return stime;\n  }\n\n  endTime(eTime:string){\n    return eTime;\n  }\n\n  spentTime(sptTime:string){\n    return sptTime;\n  }\n  calculateSpentTime() {\n\n    if (startTime && endTime) {\n      const startAmPm = this.getAmPm(startTime);\n      const endAmPm = this.getAmPm(endTime);\n\n      const startTime24 = this.convertTo24HourFormat(startTime);\n      const endTime24 = this.convertTo24HourFormat(endTime);\n\n      const start = new Date(`2000-01-01T${startTime24}`);\n      const end = new Date(`2000-01-01T${endTime24}`);\n\n      if (startAmPm === 'PM' && endAmPm === 'AM') {\n        end.setDate(end.getDate() + 1); // Add 1 day if end time is in the next day\n      }\n\n      const diffInMs = end.getTime() - start.getTime();\n      if (diffInMs >= 0) {\n        const hours = Math.floor(diffInMs / (1000 * 60 * 60));\n        const minutes = Math.floor((diffInMs % (1000 * 60 * 60)) / (1000 * 60));\n        spentTime = `${this.padZero(hours)}H${this.padZero(minutes)}`;\n      } else {\n        spentTime = 'Invalid Time'; // Display an error message for negative time\n      }\n    } else {\n      spentTime = 'Invalid Time';\n    }\n    return spentTime;\n  }\n\n  padZero(value: number): string {\n    return value.toString().padStart(2, '0');\n  }\n\n  getAmPm(time: string): string {\n    const [hours, minutes] = time.split(':');\n    const parsedHours = parseInt(hours, 10);\n\n    return parsedHours >= 12 ? 'PM' : 'AM';\n  }\n\n  convertTo24HourFormat(time: string): string {\n    const [hours, minutes, amPm] = time.split(':');\n    const parsedHours = parseInt(hours, 10);\n\n    if (amPm === 'PM' && parsedHours < 12) {\n      return `${parsedHours + 12}:${minutes}`;\n    } else if (amPm === 'AM' && parsedHours === 12) {\n      return `00:${minutes}`;\n    } else {\n      return `${hours}:${minutes}`;\n    }\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}