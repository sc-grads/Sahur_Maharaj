{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { catchError } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\nlet TimesheetComponent = class TimesheetComponent {\n  constructor(dls, calcTimeService, edts, datePipe) {\n    this.dls = dls;\n    this.calcTimeService = calcTimeService;\n    this.edts = edts;\n    this.datePipe = datePipe;\n    this.message = '';\n    this.userid = 0;\n    this.timesheetData = [];\n    this.clientData = [];\n    this.taskData = [];\n    this.selectedTimesheet = {};\n    this.isEditing = false;\n    this.spentTime = '';\n    this.filteredTimesheetData = [];\n    this.filterType = '';\n  }\n  ngOnInit() {\n    this.dls.loadData().pipe(catchError(error => {\n      console.error(error);\n      this.message = 'Failed to load data: ' + error.status;\n      return throwError(error);\n    })).subscribe(response => {\n      this.userid = response.userid;\n      this.timesheetData = response.timesheet;\n      this.clientData = response.clients;\n      this.taskData = response.tasks;\n      this.populateClientAndTaskNames();\n      this.timesheetData.reverse();\n      this.filterByDay();\n    });\n  }\n  formatDate(date) {\n    if (date !== null) {\n      return this.datePipe.transform(new Date(date), 'EEEE - dd - MMMM - yyyy') || '';\n    }\n    return '';\n  }\n  populateClientAndTaskNames() {\n    for (let timesheet of this.timesheetData) {\n      let client = this.clientData.find(client => client.id === timesheet.client_id);\n      timesheet.client_name = client ? client.Name : '';\n      let task = this.taskData.find(task => task.id === timesheet.task_id);\n      timesheet.task_name = task ? task.Name : '';\n    }\n  }\n  calculateSpentTime() {\n    const startTime = this.selectedTimesheet.start_time;\n    const endTime = this.selectedTimesheet.end_time;\n    this.spentTime = this.calcTimeService.calculateSpentTime(startTime, endTime, this.selectedTimesheet.spentTime);\n  }\n  openOverlay(timesheet) {\n    this.selectedTimesheet = {\n      ...timesheet\n    };\n    this.spentTime = '';\n    this.isEditing = true;\n  }\n  saveChanges() {\n    console.log('Edited Timesheet:', this.selectedTimesheet);\n    this.edts.submitForUpdate(this.selectedTimesheet).pipe(catchError(error => {\n      console.error('Failed to save timesheet data:', error);\n      return throwError(error);\n    })).subscribe(response => {\n      console.log('Timesheet data saved:', response);\n      window.location.reload();\n    });\n    this.isEditing = false;\n    this.selectedTimesheet = {};\n  }\n  closeOverlay() {\n    this.isEditing = false;\n    this.selectedTimesheet = null;\n  }\n  filterByYear() {\n    this.filterType = 'year';\n    const currentYear = new Date().getFullYear();\n    this.filteredTimesheetData = this.timesheetData.filter(timesheet => {\n      const year = new Date(timesheet.date).getFullYear();\n      return year === currentYear;\n    });\n  }\n  filterByMonth() {\n    this.filterType = 'month';\n    const currentYear = new Date().getFullYear();\n    const currentMonth = new Date().getMonth();\n    const firstDayOfMonth = new Date(currentYear, currentMonth, 1);\n    const lastDayOfMonth = new Date(currentYear, currentMonth + 1, 0);\n    this.filteredTimesheetData = [];\n    for (let day = lastDayOfMonth.getDate(); day >= firstDayOfMonth.getDate(); day--) {\n      const date = new Date(currentYear, currentMonth, day).toDateString();\n      const dayTimesheets = this.timesheetData.filter(timesheet => {\n        const timesheetDate = new Date(timesheet.date).toDateString();\n        return timesheetDate === date;\n      });\n      if (dayTimesheets.length > 0) {\n        this.filteredTimesheetData.push({\n          date: date,\n          timesheets: dayTimesheets\n        });\n      }\n    }\n  }\n  filterByDay() {\n    this.filterType = 'day';\n    const daysOfWeek = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\n    this.filteredTimesheetData = [];\n    for (let i = 0; i < 7; i++) {\n      const currentDay = new Date();\n      currentDay.setDate(currentDay.getDate() - (currentDay.getDay() - i + 6) % 7); // Adjust the calculation to start from Monday\n      const date = currentDay.toDateString();\n      const dayTimesheets = this.timesheetData.filter(timesheet => {\n        const timesheetDate = new Date(timesheet.date).toDateString();\n        return timesheetDate === date;\n      });\n      this.filteredTimesheetData.push({\n        dayOfWeek: daysOfWeek[i],\n        timesheets: dayTimesheets\n      });\n    }\n  }\n};\nTimesheetComponent = __decorate([Component({\n  selector: 'app-timesheet',\n  templateUrl: './timesheet.component.html',\n  styleUrls: ['./timesheet.component.css']\n})], TimesheetComponent);\nexport { TimesheetComponent };","map":{"version":3,"mappings":"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","names":["Component","catchError","throwError","TimesheetComponent","constructor","dls","calcTimeService","edts","datePipe","ngOnInit","loadData","pipe","error","console","message","status","subscribe","response","userid","timesheetData","timesheet","clientData","clients","taskData","tasks","populateClientAndTaskNames","reverse","filterByDay","formatDate","date","transform","Date","client","find","id","client_id","client_name","Name","task","task_id","task_name","calculateSpentTime","startTime","selectedTimesheet","start_time","endTime","end_time","spentTime","openOverlay","isEditing","saveChanges","log","submitForUpdate","window","location","reload","closeOverlay","filterByYear","filterType","currentYear","getFullYear","filteredTimesheetData","filter","year","filterByMonth","currentMonth","getMonth","firstDayOfMonth","lastDayOfMonth","day","getDate","toDateString","dayTimesheets","timesheetDate","length","push","timesheets","daysOfWeek","i","currentDay","setDate","getDay","dayOfWeek","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\sahur\\OneDrive - Northern Data (Pty) Ltd\\Sahur_Maharaj\\Sahur_Maharaj\\Projects\\Timesheet-Project-V2\\Frontend\\chronosync\\src\\app\\components\\timesheet\\timesheet.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { catchError } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\nimport { DataloadService } from '../../services/api/dataload.service';\nimport { CalcTimeService } from \"../../services/backend/calc-time.service\";\nimport { EdittimeService } from \"../../services/api/edittime.service\";\nimport { DatePipe } from '@angular/common';\n\n@Component({\n  selector: 'app-timesheet',\n  templateUrl: './timesheet.component.html',\n  styleUrls: ['./timesheet.component.css']\n})\nexport class TimesheetComponent {\n\n  message: string = '';\n  userid: number = 0;\n  timesheetData: any[] = [];\n  clientData: any[] = [];\n  taskData: any[] = [];\n  selectedTimesheet: any = {};\n  isEditing: boolean = false;\n  spentTime: string = '';\n  filteredTimesheetData: any[] = [];\n  filterType: string = '';\n\n  constructor(\n    private dls: DataloadService,\n    private calcTimeService: CalcTimeService,\n    private edts: EdittimeService,\n    private datePipe: DatePipe\n  ) { }\n\n  ngOnInit() {\n    this.dls.loadData().pipe(\n      catchError((error: any) => {\n        console.error(error);\n        this.message = 'Failed to load data: ' + error.status;\n        return throwError(error);\n      })\n    ).subscribe((response) => {\n      this.userid = response.userid;\n      this.timesheetData = response.timesheet;\n      this.clientData = response.clients;\n      this.taskData = response.tasks;\n      this.populateClientAndTaskNames();\n      this.timesheetData.reverse();\n      this.filterByDay();\n    });\n  }\n\n  formatDate(date: string | null): string {\n    if (date !== null) {\n      return this.datePipe.transform(new Date(date), 'EEEE - dd - MMMM - yyyy') || '';\n    }\n    return '';\n  }\n\n  populateClientAndTaskNames() {\n    for (let timesheet of this.timesheetData) {\n      let client = this.clientData.find((client) => client.id === timesheet.client_id);\n      timesheet.client_name = client ? client.Name : '';\n\n      let task = this.taskData.find((task) => task.id === timesheet.task_id);\n      timesheet.task_name = task ? task.Name : '';\n    }\n  }\n\n  calculateSpentTime() {\n    const startTime = this.selectedTimesheet.start_time;\n    const endTime = this.selectedTimesheet.end_time;\n    this.spentTime = this.calcTimeService.calculateSpentTime(startTime, endTime, this.selectedTimesheet.spentTime);\n  }\n\n  openOverlay(timesheet: any) {\n    this.selectedTimesheet = { ...timesheet };\n    this.spentTime = '';\n    this.isEditing = true;\n  }\n\n  saveChanges() {\n    console.log('Edited Timesheet:', this.selectedTimesheet);\n    this.edts.submitForUpdate(this.selectedTimesheet).pipe(\n      catchError((error: any) => {\n        console.error('Failed to save timesheet data:', error);\n        return throwError(error);\n      })\n    ).subscribe((response) => {\n      console.log('Timesheet data saved:', response);\n      window.location.reload();\n    });\n\n    this.isEditing = false;\n    this.selectedTimesheet = {};\n  }\n\n  closeOverlay() {\n    this.isEditing = false;\n    this.selectedTimesheet = null;\n  }\n\n  filterByYear() {\n    this.filterType = 'year';\n    const currentYear = new Date().getFullYear();\n    this.filteredTimesheetData = this.timesheetData.filter((timesheet) => {\n      const year = new Date(timesheet.date).getFullYear();\n      return year === currentYear;\n    });\n  }\n\n  filterByMonth() {\n    this.filterType = 'month';\n    const currentYear = new Date().getFullYear();\n    const currentMonth = new Date().getMonth();\n    const firstDayOfMonth = new Date(currentYear, currentMonth, 1);\n    const lastDayOfMonth = new Date(currentYear, currentMonth + 1, 0);\n\n    this.filteredTimesheetData = [];\n    for (let day = lastDayOfMonth.getDate(); day >= firstDayOfMonth.getDate(); day--) {\n      const date = new Date(currentYear, currentMonth, day).toDateString();\n      const dayTimesheets = this.timesheetData.filter((timesheet) => {\n        const timesheetDate = new Date(timesheet.date).toDateString();\n        return timesheetDate === date;\n      });\n\n      if (dayTimesheets.length > 0) {\n        this.filteredTimesheetData.push({\n          date: date,\n          timesheets: dayTimesheets\n        });\n      }\n    }\n  }\n\nfilterByDay() {\n  this.filterType = 'day';\n  const daysOfWeek = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\n\n  this.filteredTimesheetData = [];\n\n  for (let i = 0; i < 7; i++) {\n    const currentDay = new Date();\n    currentDay.setDate(currentDay.getDate() - (currentDay.getDay() - i + 6) % 7); // Adjust the calculation to start from Monday\n    const date = currentDay.toDateString();\n    const dayTimesheets = this.timesheetData.filter((timesheet) => {\n      const timesheetDate = new Date(timesheet.date).toDateString();\n      return timesheetDate === date;\n    });\n\n    this.filteredTimesheetData.push({\n      dayOfWeek: daysOfWeek[i],\n      timesheets: dayTimesheets\n    });\n  }\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}