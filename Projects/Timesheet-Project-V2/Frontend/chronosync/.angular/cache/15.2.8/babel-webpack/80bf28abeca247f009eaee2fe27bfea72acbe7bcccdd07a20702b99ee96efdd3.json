{"ast":null,"code":"import { catchError } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/api/dataload.service\";\nimport * as i2 from \"@angular/common\";\nfunction TimesheetComponent_tr_24_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\");\n  }\n}\nfunction TimesheetComponent_tr_25_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"td\");\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"td\");\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"td\");\n    i0.ɵɵtext(12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"td\");\n    i0.ɵɵtext(14);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"td\");\n    i0.ɵɵtext(16);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(17, \"td\");\n    i0.ɵɵtext(18);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(19, \"td\");\n    i0.ɵɵtext(20);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const timesheet_r3 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(timesheet_r3.entry_no);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(timesheet_r3.date);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(timesheet_r3.billable);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(timesheet_r3.project);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(timesheet_r3.client);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(timesheet_r3.task);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(timesheet_r3.start_time);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(timesheet_r3.end_time);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(timesheet_r3.time_spent);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(timesheet_r3.comment);\n  }\n}\nexport class TimesheetComponent {\n  constructor(dls) {\n    this.dls = dls;\n    this.message = '';\n    this.userid = 0;\n    this.timesheetData = [];\n    this.clientData = [];\n    this.taskData = [];\n  }\n  ngOnInit() {\n    this.dls.loadData().pipe(catchError(error => {\n      console.error(error);\n      this.message = 'Failed to load data: ' + error.status;\n      return throwError(error);\n    })).subscribe(response => {\n      // Set user id\n      this.userid = response.userid;\n      // Populate timesheet data\n      this.timesheetData = response.timesheet;\n      // Populate client data\n      this.clientData = response.clients;\n      // Populate task data\n      this.taskData = response.tasks;\n      // Get client name and task name based on IDs in timesheet data\n      this.populateClientAndTaskNames();\n    });\n  }\n  populateClientAndTaskNames() {\n    for (let timesheet of this.timesheetData) {\n      // Find client name based on client_id\n      let client = this.clientData.find(client => client.id === timesheet.client_id);\n      timesheet.client_name = client ? client.Name : '';\n      // Find task name based on task_id\n      let task = this.taskData.find(task => task.id === timesheet.task_id);\n      timesheet.task_name = task ? task.Name : '';\n    }\n  }\n}\nTimesheetComponent.ɵfac = function TimesheetComponent_Factory(t) {\n  return new (t || TimesheetComponent)(i0.ɵɵdirectiveInject(i1.DataloadService));\n};\nTimesheetComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: TimesheetComponent,\n  selectors: [[\"app-timesheet\"]],\n  decls: 26,\n  vars: 2,\n  consts: [[4, \"ngFor\", \"ngForOf\"]],\n  template: function TimesheetComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"table\")(1, \"thead\")(2, \"tr\")(3, \"th\");\n      i0.ɵɵtext(4, \"Clock ID\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"th\");\n      i0.ɵɵtext(6, \"Date\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"th\");\n      i0.ɵɵtext(8, \"Billable\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"th\");\n      i0.ɵɵtext(10, \"Project\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"th\");\n      i0.ɵɵtext(12, \"Client\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"th\");\n      i0.ɵɵtext(14, \"Task\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(15, \"th\");\n      i0.ɵɵtext(16, \"Start Time\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(17, \"th\");\n      i0.ɵɵtext(18, \"End Time\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(19, \"th\");\n      i0.ɵɵtext(20, \"Spent Time\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(21, \"th\");\n      i0.ɵɵtext(22, \"Comment\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(23, \"tbody\");\n      i0.ɵɵtemplate(24, TimesheetComponent_tr_24_Template, 1, 0, \"tr\", 0);\n      i0.ɵɵtemplate(25, TimesheetComponent_tr_25_Template, 21, 10, \"tr\", 0);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(24);\n      i0.ɵɵproperty(\"ngForOf\", ctx.timesheetData);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.timesheetData);\n    }\n  },\n  dependencies: [i2.NgForOf],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["catchError","throwError","i0","TimesheetComponent","constructor","dls","ngOnInit","loadData","pipe","error","console","message","status","subscribe","response","userid","timesheetData","timesheet","clientData","clients","taskData","tasks","populateClientAndTaskNames","client","find","id","client_id","client_name","Name","task","task_id","task_name","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\Sahur Maharaj\\OneDrive - Northern Data (Pty) Ltd\\Sahur_Maharaj\\Sahur_Maharaj\\Projects\\Timesheet-Project-V2\\Frontend\\chronosync\\src\\app\\components\\timesheet\\timesheet.component.ts","C:\\Users\\Sahur Maharaj\\OneDrive - Northern Data (Pty) Ltd\\Sahur_Maharaj\\Sahur_Maharaj\\Projects\\Timesheet-Project-V2\\Frontend\\chronosync\\src\\app\\components\\timesheet\\timesheet.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { catchError } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\nimport { DataloadService } from '../../services/api/dataload.service';\n\n@Component({\n  selector: 'app-timesheet',\n  templateUrl: './timesheet.component.html',\n  styleUrls: ['./timesheet.component.css']\n})\nexport class TimesheetComponent {\n\n  message: string = '';\n  userid: number = 0;\n  timesheetData: any[] = [];\n  clientData: any[] = [];\n  taskData: any[] = [];\n\n  constructor(private dls: DataloadService) { }\n\n  ngOnInit() {\n    this.dls.loadData().pipe(\n      catchError((error: any) => {\n        console.error(error);\n        this.message = 'Failed to load data: ' + error.status;\n        return throwError(error);\n      })\n    ).subscribe((response) => {\n      // Set user id\n      this.userid = response.userid;\n      // Populate timesheet data\n      this.timesheetData = response.timesheet;\n      // Populate client data\n      this.clientData = response.clients;\n      // Populate task data\n      this.taskData = response.tasks;\n      // Get client name and task name based on IDs in timesheet data\n      this.populateClientAndTaskNames();\n    });\n  }\n\n  populateClientAndTaskNames() {\n    for (let timesheet of this.timesheetData) {\n      // Find client name based on client_id\n      let client = this.clientData.find((client) => client.id === timesheet.client_id);\n      timesheet.client_name = client ? client.Name : '';\n\n      // Find task name based on task_id\n      let task = this.taskData.find((task) => task.id === timesheet.task_id);\n      timesheet.task_name = task ? task.Name : '';\n    }\n  }\n}\n","<table>\n  <thead>\n    <tr>\n      <th>Clock ID</th>\n      <th>Date</th>\n      <th>Billable</th>\n      <th>Project</th>\n      <th>Client</th>\n      <th>Task</th>\n      <th>Start Time</th>\n      <th>End Time</th>\n      <th>Spent Time</th>\n      <th>Comment</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr *ngFor=\"let timesheet of timesheetData\">\n  <!-- ... -->\n<tr *ngFor=\"let timesheet of timesheetData\">\n  <td>{{ timesheet.entry_no }}</td> <!-- Update the property name to 'entry_no' -->\n  <td>{{ timesheet.date }}</td>\n  <td>{{ timesheet.billable }}</td>\n  <td>{{ timesheet.project }}</td>\n  <td>{{ timesheet.client }}</td>\n  <td>{{ timesheet.task }}</td>\n  <td>{{ timesheet.start_time }}</td>\n  <td>{{ timesheet.end_time }}</td>\n  <td>{{ timesheet.time_spent }}</td>\n  <td>{{ timesheet.comment }}</td>\n</tr>\n<!-- ... -->\n\n  </tbody>\n</table>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}