{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { catchError } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\nlet TimesheetComponent = class TimesheetComponent {\n  constructor(dls) {\n    this.dls = dls;\n    this.message = '';\n    this.userid = 0;\n    this.timesheetData = [];\n    this.clientData = [];\n    this.taskData = [];\n  }\n  ngOnInit() {\n    this.dls.loadData().pipe(catchError(error => {\n      console.error(error);\n      this.message = 'Failed to load data: ' + error.status;\n      return throwError(error);\n    })).subscribe(response => {\n      // Set user id\n      this.userid = response.userid;\n      // Populate timesheet data\n      this.timesheetData = response.timesheet;\n      // Populate client data\n      this.clientData = response.clients;\n      // Populate task data\n      this.taskData = response.tasks;\n      // Get client name and task name based on IDs in timesheet data\n      this.populateClientAndTaskNames();\n    });\n  }\n  populateClientAndTaskNames() {\n    for (let timesheet of this.timesheetData) {\n      // Find client name based on client_id\n      let client = this.clientData.find(client => client.id === timesheet.client_id);\n      timesheet.client_name = client ? client.Name : '';\n      // Find task name based on task_id\n      let task = this.taskData.find(task => task.id === timesheet.task_id);\n      timesheet.task_name = task ? task.Name : '';\n    }\n  }\n  openOverlay(timesheet) {\n    this.selectedTimesheet = timesheet; // Set the selectedTimesheet property\n    // Show the modal overlay and pass the timesheet data to the overlay component\n    // You can implement this part based on your preferred method for showing overlays/modals\n    // and passing data to the overlay component.\n  }\n};\n\nTimesheetComponent = __decorate([Component({\n  selector: 'app-timesheet',\n  templateUrl: './timesheet.component.html',\n  styleUrls: ['./timesheet.component.css']\n})], TimesheetComponent);\nexport { TimesheetComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AACzC,SAASC,UAAU,QAAQ,gBAAgB;AAC3C,SAASC,UAAU,QAAQ,MAAM;AAQ1B,IAAMC,kBAAkB,GAAxB,MAAMA,kBAAkB;EAS7BC,YAAoBC,GAAoB;IAApB,QAAG,GAAHA,GAAG;IAPvB,YAAO,GAAW,EAAE;IACpB,WAAM,GAAW,CAAC;IAClB,kBAAa,GAAU,EAAE;IACzB,eAAU,GAAU,EAAE;IACtB,aAAQ,GAAU,EAAE;EAGwB;EAE5CC,QAAQ;IACN,IAAI,CAACD,GAAG,CAACE,QAAQ,EAAE,CAACC,IAAI,CACtBP,UAAU,CAAEQ,KAAU,IAAI;MACxBC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACpB,IAAI,CAACE,OAAO,GAAG,uBAAuB,GAAGF,KAAK,CAACG,MAAM;MACrD,OAAOV,UAAU,CAACO,KAAK,CAAC;IAC1B,CAAC,CAAC,CACH,CAACI,SAAS,CAAEC,QAAQ,IAAI;MACvB;MACA,IAAI,CAACC,MAAM,GAAGD,QAAQ,CAACC,MAAM;MAC7B;MACA,IAAI,CAACC,aAAa,GAAGF,QAAQ,CAACG,SAAS;MACvC;MACA,IAAI,CAACC,UAAU,GAAGJ,QAAQ,CAACK,OAAO;MAClC;MACA,IAAI,CAACC,QAAQ,GAAGN,QAAQ,CAACO,KAAK;MAC9B;MACA,IAAI,CAACC,0BAA0B,EAAE;IACnC,CAAC,CAAC;EACJ;EAEAA,0BAA0B;IACxB,KAAK,IAAIL,SAAS,IAAI,IAAI,CAACD,aAAa,EAAE;MACxC;MACA,IAAIO,MAAM,GAAG,IAAI,CAACL,UAAU,CAACM,IAAI,CAAED,MAAM,IAAKA,MAAM,CAACE,EAAE,KAAKR,SAAS,CAACS,SAAS,CAAC;MAChFT,SAAS,CAACU,WAAW,GAAGJ,MAAM,GAAGA,MAAM,CAACK,IAAI,GAAG,EAAE;MAEjD;MACA,IAAIC,IAAI,GAAG,IAAI,CAACT,QAAQ,CAACI,IAAI,CAAEK,IAAI,IAAKA,IAAI,CAACJ,EAAE,KAAKR,SAAS,CAACa,OAAO,CAAC;MACtEb,SAAS,CAACc,SAAS,GAAGF,IAAI,GAAGA,IAAI,CAACD,IAAI,GAAG,EAAE;;EAE/C;EAEAI,WAAW,CAACf,SAAc;IACxB,IAAI,CAACgB,iBAAiB,GAAGhB,SAAS,CAAC,CAAC;IACpC;IACA;IACA;EACF;CACD;;AAlDYd,kBAAkB,eAL9BH,SAAS,CAAC;EACTkC,QAAQ,EAAE,eAAe;EACzBC,WAAW,EAAE,4BAA4B;EACzCC,SAAS,EAAE,CAAC,2BAA2B;CACxC,CAAC,GACWjC,kBAAkB,CAkD9B;SAlDYA,kBAAkB","names":["Component","catchError","throwError","TimesheetComponent","constructor","dls","ngOnInit","loadData","pipe","error","console","message","status","subscribe","response","userid","timesheetData","timesheet","clientData","clients","taskData","tasks","populateClientAndTaskNames","client","find","id","client_id","client_name","Name","task","task_id","task_name","openOverlay","selectedTimesheet","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\Sahur Maharaj\\OneDrive - Northern Data (Pty) Ltd\\Sahur_Maharaj\\Sahur_Maharaj\\Projects\\Timesheet-Project-V2\\Frontend\\chronosync\\src\\app\\components\\timesheet\\timesheet.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { catchError } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\nimport { DataloadService } from '../../services/api/dataload.service';\n\n@Component({\n  selector: 'app-timesheet',\n  templateUrl: './timesheet.component.html',\n  styleUrls: ['./timesheet.component.css']\n})\nexport class TimesheetComponent {\n\n  message: string = '';\n  userid: number = 0;\n  timesheetData: any[] = [];\n  clientData: any[] = [];\n  taskData: any[] = [];\n  selectedTimesheet: any; // Declare the selectedTimesheet property\n\n  constructor(private dls: DataloadService) { }\n\n  ngOnInit() {\n    this.dls.loadData().pipe(\n      catchError((error: any) => {\n        console.error(error);\n        this.message = 'Failed to load data: ' + error.status;\n        return throwError(error);\n      })\n    ).subscribe((response) => {\n      // Set user id\n      this.userid = response.userid;\n      // Populate timesheet data\n      this.timesheetData = response.timesheet;\n      // Populate client data\n      this.clientData = response.clients;\n      // Populate task data\n      this.taskData = response.tasks;\n      // Get client name and task name based on IDs in timesheet data\n      this.populateClientAndTaskNames();\n    });\n  }\n\n  populateClientAndTaskNames() {\n    for (let timesheet of this.timesheetData) {\n      // Find client name based on client_id\n      let client = this.clientData.find((client) => client.id === timesheet.client_id);\n      timesheet.client_name = client ? client.Name : '';\n\n      // Find task name based on task_id\n      let task = this.taskData.find((task) => task.id === timesheet.task_id);\n      timesheet.task_name = task ? task.Name : '';\n    }\n  }\n\n  openOverlay(timesheet: any) {\n    this.selectedTimesheet = timesheet; // Set the selectedTimesheet property\n    // Show the modal overlay and pass the timesheet data to the overlay component\n    // You can implement this part based on your preferred method for showing overlays/modals\n    // and passing data to the overlay component.\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}